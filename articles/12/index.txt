3:I[9275,[],""]
5:I[1343,[],""]
6:I[231,["231","static/chunks/231-6e5a6fe9d280e7f0.js","697","static/chunks/app/(frontend)/articles/%5BissueNumber%5D/page-62d62930bc493e30.js"],""]
d:I[4404,["185","static/chunks/app/layout-3bd634e8e698e8fd.js"],"GoogleAnalytics"]
4:["issueNumber","12","d"]
7:T518,M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z8:T518,M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z9:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
a:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
b:{"display":"inline-block"}
c:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["FN8Q8kmLnioCiqZf6l08_",[[["",{"children":["(frontend)",{"children":["articles",{"children":[["issueNumber","12","d"],{"children":["__PAGE__?{\"issueNumber\":\"12\"}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(frontend)",{"children":["articles",{"children":[["issueNumber","12","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(frontend)","children","articles","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(frontend)","children","articles","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,[["$","header",null,{"className":"mx-auto flex w-[95%] max-w-screen-lg items-center py-3","children":[["$","nav",null,{"children":["$","$L6",null,{"href":"/","className":"alternative-link flex items-center font-bold text-lg","children":[["$","svg",null,{"viewBox":"0 0 100 100","xmlns":"http://www.w3.org/2000/svg","className":"mr-2 h-6 w-6","children":[["$","rect",null,{"x":0,"y":0,"width":20,"height":100,"fill":"white"}],["$","rect",null,{"x":40,"y":0,"width":20,"height":100,"fill":"white"}],["$","rect",null,{"x":80,"y":0,"width":20,"height":100,"fill":"white"}]]}],"waonpad blog"]}]}],["$","nav",null,{"className":"ml-auto","children":["$","ul",null,{"className":"flex items-center gap-6","children":[["$","li",null,{"children":["$","$L6",null,{"href":"/about","className":"alternative-link font-medium text-slate-300","children":"About"}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/tags","className":"alternative-link font-medium text-slate-300","children":"Tags"}]}],["$","li",null,{"children":["$","a",null,{"href":"https://github.com/waonpad","rel":"noopener noreferrer","target":"_blank","className":"alternative-link text-slate-300","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 496 512","children":["$undefined",[["$","path","0",{"d":"$7","children":[]}]]],"className":"$undefined","style":{"color":"$undefined"},"height":18,"width":18,"xmlns":"http://www.w3.org/2000/svg"}]}]}]]}]}]]}],["$","main",null,{"className":"mx-auto flex w-[95%] max-w-screen-lg grow flex-col py-2","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(frontend)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}],["$","footer",null,{"className":"mx-auto w-[95%] max-w-screen-lg py-4","children":["$","nav",null,{"className":"flex flex-col gap-3","children":[["$","ul",null,{"className":"flex items-center justify-center gap-6","children":["$","li",null,{"children":["$","a",null,{"href":"https://github.com/waonpad","rel":"noopener noreferrer","target":"_blank","className":"alternative-link text-slate-300","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 496 512","children":["$undefined",[["$","path","0",{"d":"$8","children":[]}]]],"className":"$undefined","style":{"color":"$undefined"},"height":18,"width":18,"xmlns":"http://www.w3.org/2000/svg"}]}]}]}],["$","ul",null,{"className":"flex items-center justify-center gap-6","children":[["$","li",null,{"children":["$","$L6",null,{"href":"/","className":"alternative-link font-medium text-slate-300","children":"Home"}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/about","className":"alternative-link font-medium text-slate-300","children":"About"}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/tags","className":"alternative-link font-medium text-slate-300","children":"Tags"}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/privacy","className":"alternative-link font-medium text-slate-300","children":"Privacy"}]}]]}]]}]}]]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/blog/_next/static/css/c671f7406f86e8e2.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ja","children":[["$","body",null,{"className":"flex min-h-dvh flex-col","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$9","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$a","children":"404"}],["$","div",null,{"style":"$b","children":["$","h2",null,{"style":"$c","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}],["$","$Ld",null,{"gaId":"G-41KF9W3KRE"}]]}]],null],null],["$Le",null]]]]
e:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"TypeScriptで緩くDI的な事をしたい | waonpad blog"}],["$","meta","3",{"name":"description","content":"waonpadのブログです。"}],["$","meta","4",{"property":"og:title","content":"TypeScriptで緩くDI的な事をしたい | waonpad blog"}],["$","meta","5",{"property":"og:description","content":"waonpadのブログです。"}],["$","meta","6",{"property":"og:image","content":"https://waonpad.github.io/blog/articles/12/opengraph-image.png"}],["$","meta","7",{"property":"og:image:width","content":"1200"}],["$","meta","8",{"property":"og:image:height","content":"630"}],["$","meta","9",{"property":"og:image:type","content":"image/png"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"TypeScriptで緩くDI的な事をしたい | waonpad blog"}],["$","meta","12",{"name":"twitter:description","content":"waonpadのブログです。"}],["$","meta","13",{"name":"twitter:image","content":"https://waonpad.github.io/blog/articles/12/opengraph-image.png"}],["$","meta","14",{"name":"twitter:image:width","content":"1200"}],["$","meta","15",{"name":"twitter:image:height","content":"630"}],["$","meta","16",{"name":"twitter:image:type","content":"image/png"}],["$","link","17",{"rel":"icon","href":"/blog/favicon.ico"}]]
1:null
f:T5b51,<details><summary>目次</summary><nav class="toc"><ol class="toc-level toc-level-1"><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#何がしたいか">何がしたいか</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#velona">Velona</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#開き直る">開き直る</a></li></ol></nav></details><p>これは8月6日にZennに投稿した記事を移動させたものです。</p>
<h1 id="何がしたいか"><a class="alternative-link" style="display: inline-block; width: 100%;" href="#何がしたいか">何がしたいか</a></h1>
<p>参照透過性、純粋関数、テストしやすい関数みたいな文脈で調べていて、関数が外部に依存している部分を自由に外から注入できるようにしたいと思った。</p>
<p>mockやspyOnを書くのがめんどくさくて嫌いで、その関数自身がDIの機能を持ってるとテストが書きやすくて楽そう。</p>
<h1 id="velona"><a class="alternative-link" style="display: inline-block; width: 100%;" href="#velona">Velona</a></h1>
<p><a href="https://qiita.com/m_mitsuhide/items/d87102e1d8eea5b6e306" rel="noopener noreferrer" target="_blank">デコレータを使わずコールバック関数に依存性を注入できるDIヘルパーをたった15行のTypeScriptで作った話</a></p>
<p>自分がしたい事をスマートに叶えてくれそうなのがあった。</p>
<p>が、これだとdependenciesの部分が関数の<strong>作成時</strong>に実行されてしまう🥲</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="typescript" data-theme="github-dark"><code data-language="typescript" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { depend } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> 'velona'</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">export</span><span style="color:#F97583"> const</span><span style="color:#79B8FF"> myFunc</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> depend</span><span style="color:#E1E4E8">({</span></span>
<span data-line=""><span style="color:#E1E4E8">  logger: (() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#E1E4E8">    console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'funcを使用するかに関わらず、このログは出力される'</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    return</span><span style="color:#E1E4E8"> console.log</span></span>
<span data-line=""><span style="color:#E1E4E8">  })()</span></span>
<span data-line=""><span style="color:#E1E4E8">}, ({ </span><span style="color:#FFAB70">logger</span><span style="color:#E1E4E8"> }, </span><span style="color:#FFAB70">name</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> string</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#B392F0">  logger</span><span style="color:#E1E4E8">(name)</span></span>
<span data-line=""><span style="color:#E1E4E8">})</span></span><button type="button" title="Copy code" aria-label="Copy code" data="import { depend } from &#x27;velona&#x27;

export const myFunc = depend({
  logger: (() => {
    console.log(&#x27;funcを使用するかに関わらず、このログは出力される&#x27;)

    return console.log
  })()
}, ({ logger }, name: string) => {
  logger(name)
})" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>また、テストを書くときに以下のようにしてもその変数名がログに出てくれない。</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="typescript" data-theme="github-dark"><code data-language="typescript" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { describe, expect, it, vi } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "vitest"</span></span>
<span data-line=""><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { myFunc } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "."</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#B392F0">describe</span><span style="color:#E1E4E8">(myFunc, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'should log name'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#F97583">    const</span><span style="color:#79B8FF"> mockLogger</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> vi.</span><span style="color:#B392F0">fn</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {})</span></span>
<span data-line=""><span style="color:#F97583">    const</span><span style="color:#79B8FF"> name</span><span style="color:#F97583"> =</span><span style="color:#9ECBFF"> "user"</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    const</span><span style="color:#79B8FF"> injected</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> myFunc.</span><span style="color:#B392F0">inject</span><span style="color:#E1E4E8">({</span></span>
<span data-line=""><span style="color:#E1E4E8">      logger: mockLogger</span></span>
<span data-line=""><span style="color:#E1E4E8">    })</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#B392F0">    injected</span><span style="color:#E1E4E8">(name)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(mockLogger).</span><span style="color:#B392F0">toHaveBeenCalledWith</span><span style="color:#E1E4E8">(name)</span></span>
<span data-line=""><span style="color:#E1E4E8">  })</span></span>
<span data-line=""><span style="color:#E1E4E8">})</span></span><button type="button" title="Copy code" aria-label="Copy code" data="import { describe, expect, it, vi } from &#x22;vitest&#x22;
import { myFunc } from &#x22;.&#x22;

describe(myFunc, () => {
  it(&#x27;should log name&#x27;, () => {
    const mockLogger = vi.fn(() => {})
    const name = &#x22;user&#x22;

    const injected = myFunc.inject({
      logger: mockLogger
    })

    injected(name)

    expect(mockLogger).toHaveBeenCalledWith(name)
  })
})" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>出力されるログ</p>
<p>これの<code>fn</code>が<code>myFunc</code>となってほしい。</p>
<pre><code> ✓ src/index.test.ts (1)
   ✓ fn (1)
     ✓ should log name

 Test Files  1 passed (1)
      Tests  1 passed (1)
</code></pre>
<p>これは<code>depend</code>関数が内部で関数を作成していて、それの名前が<code>fn</code>となっており、</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="typescript" data-theme="github-dark"><code data-language="typescript" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">const</span><span style="color:#B392F0"> fn</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">...</span><span style="color:#FFAB70">args</span><span style="color:#F97583">:</span><span style="color:#B392F0"> U</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#B392F0"> cb</span><span style="color:#E1E4E8">(dependencies, </span><span style="color:#F97583">...</span><span style="color:#E1E4E8">args)</span></span><button type="button" title="Copy code" aria-label="Copy code" data="const fn = (...args: U) => cb(dependencies, ...args)" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>Vitestはdescribeの第一引数に関数を渡されると、<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/name" rel="noopener noreferrer" target="_blank">Function.name</a>を取得して表示しているため。</p>
<p>で、ついでに気になったので、寄り道して変数そのものの名前を取得する方法を調べてみた。</p>
<p><a href="https://qiita.com/standard-software/items/8c8815111dffe11a76db" rel="noopener noreferrer" target="_blank">JavaScript 変数名と値を文字列として取得する</a></p>
<p>めんどくさ・・・案外こういうの難しいんだな。</p>
<h1 id="開き直る"><a class="alternative-link" style="display: inline-block; width: 100%;" href="#開き直る">開き直る</a></h1>
<p>ライブラリを利用するといろいろとだるそうだったので、<br>
コーディングの規約を設け、関数はこのように作る事にすればええか〜という事でこの話は終わりにした。</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="typescript" data-theme="github-dark"><code data-language="typescript" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">export</span><span style="color:#F97583"> const</span><span style="color:#B392F0"> myFunc2</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> (</span></span>
<span data-line=""><span style="color:#6A737D">  // 実行時に受け取る引数は全て第一引数に入れて、</span></span>
<span data-line=""><span style="color:#E1E4E8">  { </span><span style="color:#FFAB70">name</span><span style="color:#E1E4E8"> }</span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> { </span><span style="color:#FFAB70">name</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> string</span><span style="color:#E1E4E8"> },</span></span>
<span data-line=""><span style="color:#6A737D">  // 依存関係が第二引数に存在する事を統一する</span></span>
<span data-line=""><span style="color:#E1E4E8">  { </span><span style="color:#FFAB70">__deps</span><span style="color:#E1E4E8">: { </span><span style="color:#FFAB70">logger</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> console.log } </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> {} } </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> {}</span></span>
<span data-line=""><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#B392F0">  logger</span><span style="color:#E1E4E8">(name)</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="export const myFunc2 = (
  // 実行時に受け取る引数は全て第一引数に入れて、
  { name }: { name: string },
  // 依存関係が第二引数に存在する事を統一する
  { __deps: { logger = console.log } = {} } = {}
) => {
  logger(name)
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="typescript" data-theme="github-dark"><code data-language="typescript" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { describe, expect, it, vi } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "vitest"</span></span>
<span data-line=""><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { myFunc2 } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "."</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#B392F0">describe</span><span style="color:#E1E4E8">(myFunc2, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#B392F0">  it</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'should log name'</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#F97583">    const</span><span style="color:#79B8FF"> mockLogger</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> vi.</span><span style="color:#B392F0">fn</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {})</span></span>
<span data-line=""><span style="color:#F97583">    const</span><span style="color:#79B8FF"> name</span><span style="color:#F97583"> =</span><span style="color:#9ECBFF"> "user"</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#B392F0">    myFunc2</span><span style="color:#E1E4E8">({ name }, { __deps: { logger: mockLogger } })</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#B392F0">    expect</span><span style="color:#E1E4E8">(mockLogger).</span><span style="color:#B392F0">toHaveBeenCalledWith</span><span style="color:#E1E4E8">(name)</span></span>
<span data-line=""><span style="color:#E1E4E8">  })</span></span>
<span data-line=""><span style="color:#E1E4E8">})</span></span><button type="button" title="Copy code" aria-label="Copy code" data="import { describe, expect, it, vi } from &#x22;vitest&#x22;
import { myFunc2 } from &#x22;.&#x22;

describe(myFunc2, () => {
  it(&#x27;should log name&#x27;, () => {
    const mockLogger = vi.fn(() => {})
    const name = &#x22;user&#x22;

    myFunc2({ name }, { __deps: { logger: mockLogger } })

    expect(mockLogger).toHaveBeenCalledWith(name)
  })
})" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>外部モジュールに依存するものは全て<code>__deps</code>内に入れる事で、テストでモックが簡単になるし、関数が何に依存しているか一目でわかるようになる。</p>2:["$","article",null,{"className":"w-full divide-y divide-[#30363db3]","children":[["$","section",null,{"className":"markdown","children":[["$","header",null,{"children":[["$","time",null,{"itemProp":"datePublished","dateTime":"2024-10-07T18:11:58Z","className":"text-gray-400 text-sm ","children":"2024-10-08 03:11"}],["$","h1",null,{"className":"!mt-0","children":"TypeScriptで緩くDI的な事をしたい"}],false]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}]]}],[]]}]
