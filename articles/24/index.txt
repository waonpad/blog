2:"$Sreact.fragment"
3:I[9275,[],""]
4:I[1343,[],""]
5:I[4404,["185","static/chunks/app/layout-2e304f6bcbb7d62d.js"],"GoogleAnalytics"]
6:I[231,["231","static/chunks/231-be6386bd1773638d.js","697","static/chunks/app/(frontend)/articles/%5BissueNumber%5D/page-c8873240dcd0ebeb.js"],""]
a:I[3120,[],"OutletBoundary"]
c:I[3120,[],"MetadataBoundary"]
e:I[3120,[],"ViewportBoundary"]
10:I[6130,[],""]
1:HL["/blog/_next/static/css/c06117e753445fe0.css","style"]
7:T518,M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z8:T518,M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z0:{"P":null,"b":"EwHi7XDu64TSTQBt7HC5q","p":"/blog","c":["","articles","24",""],"i":false,"f":[[["",{"children":["(frontend)",{"children":["articles",{"children":[["issueNumber","24","d"],{"children":["__PAGE__?{\"issueNumber\":\"24\"}",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$2","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/blog/_next/static/css/c06117e753445fe0.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":[["$","body",null,{"className":"flex min-h-dvh flex-col","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}],["$","$L5",null,{"gaId":"G-41KF9W3KRE"}]]}]]}],{"children":["(frontend)",["$","$2","c",{"children":[null,[["$","header",null,{"className":"mx-auto flex w-[95%] max-w-screen-lg items-center py-3","children":[["$","nav",null,{"children":["$","$L6",null,{"href":"/","className":"alternative-link flex items-center font-bold text-lg","children":[["$","svg",null,{"viewBox":"0 0 100 100","xmlns":"http://www.w3.org/2000/svg","className":"mr-2 h-6 w-6","children":[["$","rect",null,{"x":0,"y":0,"width":20,"height":100,"fill":"white"}],["$","rect",null,{"x":40,"y":0,"width":20,"height":100,"fill":"white"}],["$","rect",null,{"x":80,"y":0,"width":20,"height":100,"fill":"white"}]]}],"waonpad blog"]}]}],["$","nav",null,{"className":"ml-auto","children":["$","ul",null,{"className":"flex items-center gap-6","children":[["$","li",null,{"children":["$","$L6",null,{"href":"/about","className":"alternative-link font-medium text-slate-300","children":"About"}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/tags","className":"alternative-link font-medium text-slate-300","children":"Tags"}]}],["$","li",null,{"children":["$","a",null,{"href":"https://github.com/waonpad","className":"alternative-link text-slate-300","rel":"noopener noreferrer","target":"_blank","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 496 512","children":["$undefined",[["$","path","0",{"d":"$7","children":[]}]]],"className":"$undefined","style":{"color":"$undefined"},"height":18,"width":18,"xmlns":"http://www.w3.org/2000/svg"}]}]}]]}]}]]}],["$","main",null,{"className":"mx-auto flex w-[95%] max-w-screen-lg grow flex-col py-2","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(frontend)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$0:f:0:1:1:props:children:1:props:children:0:props:children:props:notFound:1:props:style","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$0:f:0:1:1:props:children:1:props:children:0:props:children:props:notFound:1:props:children:props:children:1:props:style","children":"404"}],["$","div",null,{"style":"$0:f:0:1:1:props:children:1:props:children:0:props:children:props:notFound:1:props:children:props:children:2:props:style","children":["$","h2",null,{"style":"$0:f:0:1:1:props:children:1:props:children:0:props:children:props:notFound:1:props:children:props:children:2:props:children:props:style","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}],["$","footer",null,{"className":"mx-auto w-[95%] max-w-screen-lg py-4","children":["$","nav",null,{"className":"flex flex-col gap-3","children":[["$","ul",null,{"className":"flex items-center justify-center gap-6","children":["$","li",null,{"children":["$","a",null,{"href":"https://github.com/waonpad","className":"alternative-link text-slate-300","rel":"noopener noreferrer","target":"_blank","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 496 512","children":["$undefined",[["$","path","0",{"d":"$8","children":[]}]]],"className":"$undefined","style":{"color":"$undefined"},"height":18,"width":18,"xmlns":"http://www.w3.org/2000/svg"}]}]}]}],["$","ul",null,{"className":"flex items-center justify-center gap-6","children":[["$","li",null,{"children":["$","$L6",null,{"href":"/","className":"alternative-link font-medium text-slate-300","children":"Home"}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/about","className":"alternative-link font-medium text-slate-300","children":"About"}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/tags","className":"alternative-link font-medium text-slate-300","children":"Tags"}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/privacy","className":"alternative-link font-medium text-slate-300","children":"Privacy"}]}]]}]]}]}]]]}],{"children":["articles",["$","$2","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(frontend)","children","articles","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":[["issueNumber","24","d"],["$","$2","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(frontend)","children","articles","children","$0:f:0:1:2:children:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["__PAGE__",["$","$2","c",{"children":["$L9",null,["$","$La",null,{"children":"$Lb"}]]}],{},null]},null]},null]},null]},null],["$","$2","h",{"children":[null,["$","$2","LFFVrQcnSSgmv1JUrDWah",{"children":[["$","$Lc",null,{"children":"$Ld"}],["$","$Le",null,{"children":"$Lf"}],null]}]]}]]],"m":"$undefined","G":"$10","s":false,"S":true}
f:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
d:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Node.jsでGitHubリポジトリのIssueとコメントを全て取得して保存するスクリプト | waonpad blog"}],["$","meta","2",{"name":"description","content":"waonpadのブログです。"}],["$","meta","3",{"property":"og:title","content":"Node.jsでGitHubリポジトリのIssueとコメントを全て取得して保存するスクリプト | waonpad blog"}],["$","meta","4",{"property":"og:description","content":"waonpadのブログです。"}],["$","meta","5",{"property":"og:image","content":"https://waonpad.github.io/blog/articles/24/opengraph-image.png"}],["$","meta","6",{"property":"og:image:width","content":"1200"}],["$","meta","7",{"property":"og:image:height","content":"630"}],["$","meta","8",{"property":"og:image:type","content":"image/png"}],["$","meta","9",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","10",{"name":"twitter:title","content":"Node.jsでGitHubリポジトリのIssueとコメントを全て取得して保存するスクリプト | waonpad blog"}],["$","meta","11",{"name":"twitter:description","content":"waonpadのブログです。"}],["$","meta","12",{"name":"twitter:image","content":"https://waonpad.github.io/blog/articles/24/opengraph-image.png"}],["$","meta","13",{"name":"twitter:image:width","content":"1200"}],["$","meta","14",{"name":"twitter:image:height","content":"630"}],["$","meta","15",{"name":"twitter:image:type","content":"image/png"}],["$","link","16",{"rel":"icon","href":"/blog/favicon.ico"}]]
b:null
11:T72c1,<p>Markdown形式にしたものをブランチにpushしてIssueをバージョン管理したりするのに使う。</p>
<p>必要なものを入れて実行するとdataディレクトリに保存される。</p>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="bash" data-theme="github-dark"><code data-language="bash" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#B392F0">npm</span><span style="color:#9ECBFF"> install</span><span style="color:#9ECBFF"> octokit</span><span style="color:#9ECBFF"> gray-matter</span></span><button type="button" title="Copy code" aria-label="Copy code" data="npm install octokit gray-matter" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="typescript" data-theme="github-dark"><code data-language="typescript" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#6A737D">/**</span></span>
<span data-line=""><span style="color:#6A737D"> * ローカルで実行する場合</span></span>
<span data-line=""><span style="color:#6A737D"> *</span></span>
<span data-line=""><span style="color:#6A737D"> * - 用意したアクセストークンをGITHUB_TOKENに設定</span></span>
<span data-line=""><span style="color:#6A737D"> * - リポジトリをGITHUB_REPOSITORYに設定 (例: "user/repo")</span></span>
<span data-line=""><span style="color:#6A737D"> */</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { existsSync, mkdirSync, rmdirSync, writeFileSync } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "node:fs"</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { stringify } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "gray-matter"</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { Octokit } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "octokit"</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#79B8FF"> DATA_DIR</span><span style="color:#F97583"> =</span><span style="color:#9ECBFF"> "./data"</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#79B8FF"> ISSUES_DIR</span><span style="color:#F97583"> =</span><span style="color:#9ECBFF"> `${</span><span style="color:#79B8FF">DATA_DIR</span><span style="color:#9ECBFF">}/issues`</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#79B8FF"> ISSUE_FILE</span><span style="color:#F97583"> =</span><span style="color:#9ECBFF"> "issue.md"</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#79B8FF"> ISSUE_COMMENTS_DIR</span><span style="color:#F97583"> =</span><span style="color:#9ECBFF"> "comments"</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#B392F0"> issueDirPath</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> ({ </span><span style="color:#FFAB70">issueNumber</span><span style="color:#E1E4E8"> }</span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> { </span><span style="color:#FFAB70">issueNumber</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8"> }) </span><span style="color:#F97583">=></span><span style="color:#9ECBFF"> `${</span><span style="color:#79B8FF">ISSUES_DIR</span><span style="color:#9ECBFF">}/${</span><span style="color:#E1E4E8">issueNumber</span><span style="color:#9ECBFF">}`</span><span style="color:#F97583"> as</span><span style="color:#F97583"> const</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#B392F0"> issueFilePath</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> ({ </span><span style="color:#FFAB70">issueNumber</span><span style="color:#E1E4E8"> }</span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> { </span><span style="color:#FFAB70">issueNumber</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8"> }) </span><span style="color:#F97583">=></span></span>
<span data-line=""><span style="color:#9ECBFF">  `${</span><span style="color:#B392F0">issueDirPath</span><span style="color:#9ECBFF">({ </span><span style="color:#E1E4E8">issueNumber</span><span style="color:#9ECBFF"> })</span><span style="color:#9ECBFF">}/${</span><span style="color:#79B8FF">ISSUE_FILE</span><span style="color:#9ECBFF">}`</span><span style="color:#F97583"> as</span><span style="color:#F97583"> const</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#B392F0"> issueCommentsDirPath</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> ({ </span><span style="color:#FFAB70">issueNumber</span><span style="color:#E1E4E8"> }</span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> { </span><span style="color:#FFAB70">issueNumber</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8"> }) </span><span style="color:#F97583">=></span></span>
<span data-line=""><span style="color:#9ECBFF">  `${</span><span style="color:#79B8FF">ISSUES_DIR</span><span style="color:#9ECBFF">}/${</span><span style="color:#E1E4E8">issueNumber</span><span style="color:#9ECBFF">}/${</span><span style="color:#79B8FF">ISSUE_COMMENTS_DIR</span><span style="color:#9ECBFF">}`</span><span style="color:#F97583"> as</span><span style="color:#F97583"> const</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#B392F0"> issueCommentFilePath</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> ({ </span><span style="color:#FFAB70">issueNumber</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">commentId</span><span style="color:#E1E4E8"> }</span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> { </span><span style="color:#FFAB70">issueNumber</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8">; </span><span style="color:#FFAB70">commentId</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> number</span><span style="color:#E1E4E8"> }) </span><span style="color:#F97583">=></span></span>
<span data-line=""><span style="color:#9ECBFF">  `${</span><span style="color:#B392F0">issueCommentsDirPath</span><span style="color:#9ECBFF">({ </span><span style="color:#E1E4E8">issueNumber</span><span style="color:#9ECBFF"> })</span><span style="color:#9ECBFF">}/${</span><span style="color:#E1E4E8">commentId</span><span style="color:#9ECBFF">}.md`</span><span style="color:#F97583"> as</span><span style="color:#F97583"> const</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#79B8FF"> octokit</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Octokit</span><span style="color:#E1E4E8">({</span></span>
<span data-line=""><span style="color:#E1E4E8">  auth: process.env.</span><span style="color:#79B8FF">GITHUB_TOKEN</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#E1E4E8">});</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#B392F0"> saveIssues</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#F97583">  const</span><span style="color:#79B8FF"> issuesIterator</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> octokit.paginate.</span><span style="color:#B392F0">iterator</span><span style="color:#E1E4E8">(octokit.rest.issues.listForRepo, {</span></span>
<span data-line=""><span style="color:#E1E4E8">    owner: (process.env.</span><span style="color:#79B8FF">GITHUB_REPOSITORY</span><span style="color:#F97583"> ??</span><span style="color:#9ECBFF"> ""</span><span style="color:#E1E4E8">).</span><span style="color:#B392F0">split</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"/"</span><span style="color:#E1E4E8">)[</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">],</span></span>
<span data-line=""><span style="color:#E1E4E8">    repo: (process.env.</span><span style="color:#79B8FF">GITHUB_REPOSITORY</span><span style="color:#F97583"> ??</span><span style="color:#9ECBFF"> ""</span><span style="color:#E1E4E8">).</span><span style="color:#B392F0">split</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"/"</span><span style="color:#E1E4E8">)[</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">],</span></span>
<span data-line=""><span style="color:#6A737D">    // 全てのissueを取得</span></span>
<span data-line=""><span style="color:#E1E4E8">    state: </span><span style="color:#9ECBFF">"all"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#E1E4E8">    per_page: </span><span style="color:#79B8FF">100</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#E1E4E8">  });</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  for</span><span style="color:#F97583"> await</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">const</span><span style="color:#E1E4E8"> { </span><span style="color:#FFAB70">data</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">issues</span><span style="color:#E1E4E8"> } </span><span style="color:#F97583">of</span><span style="color:#E1E4E8"> issuesIterator) {</span></span>
<span data-line=""><span style="color:#F97583">    for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">const</span><span style="color:#79B8FF"> issue</span><span style="color:#F97583"> of</span><span style="color:#E1E4E8"> issues) {</span></span>
<span data-line=""><span style="color:#6A737D">      // PRはスキップ</span></span>
<span data-line=""><span style="color:#F97583">      if</span><span style="color:#E1E4E8"> (issue.pull_request) </span><span style="color:#F97583">continue</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E1E4E8">      console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"Issue #%d: %s"</span><span style="color:#E1E4E8">, issue.number, issue.title);</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">      const</span><span style="color:#E1E4E8"> { </span><span style="color:#79B8FF">body</span><span style="color:#E1E4E8">, </span><span style="color:#F97583">...</span><span style="color:#79B8FF">issueData</span><span style="color:#E1E4E8"> } </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> issue;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#B392F0">      mkdirSync</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">issueDirPath</span><span style="color:#E1E4E8">({ issueNumber: issue.number }), { recursive: </span><span style="color:#79B8FF">true</span><span style="color:#E1E4E8"> });</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6A737D">      // yaml形式にする</span></span>
<span data-line=""><span style="color:#F97583">      const</span><span style="color:#79B8FF"> yamlContent</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> stringify</span><span style="color:#E1E4E8">(</span></span>
<span data-line=""><span style="color:#6A737D">        // biome-ignore lint/style/noNonNullAssertion: bodyは必ず存在する</span></span>
<span data-line=""><span style="color:#E1E4E8">        body</span><span style="color:#F97583">!</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#E1E4E8">        issueData,</span></span>
<span data-line=""><span style="color:#E1E4E8">      );</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6A737D">      // ファイルを書き込む</span></span>
<span data-line=""><span style="color:#B392F0">      writeFileSync</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">issueFilePath</span><span style="color:#E1E4E8">({ issueNumber: issue.number }), yamlContent);</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#E1E4E8">  }</span></span>
<span data-line=""><span style="color:#E1E4E8">};</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#B392F0"> saveIssueComments</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#F97583">  const</span><span style="color:#79B8FF"> issueCommentsIterator</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> octokit.paginate.</span><span style="color:#B392F0">iterator</span><span style="color:#E1E4E8">(octokit.rest.issues.listCommentsForRepo, {</span></span>
<span data-line=""><span style="color:#E1E4E8">    owner: (process.env.</span><span style="color:#79B8FF">GITHUB_REPOSITORY</span><span style="color:#F97583"> ??</span><span style="color:#9ECBFF"> ""</span><span style="color:#E1E4E8">).</span><span style="color:#B392F0">split</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"/"</span><span style="color:#E1E4E8">)[</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">],</span></span>
<span data-line=""><span style="color:#E1E4E8">    repo: (process.env.</span><span style="color:#79B8FF">GITHUB_REPOSITORY</span><span style="color:#F97583"> ??</span><span style="color:#9ECBFF"> ""</span><span style="color:#E1E4E8">).</span><span style="color:#B392F0">split</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"/"</span><span style="color:#E1E4E8">)[</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">],</span></span>
<span data-line=""><span style="color:#E1E4E8">    per_page: </span><span style="color:#79B8FF">100</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#E1E4E8">  });</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  for</span><span style="color:#F97583"> await</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">const</span><span style="color:#E1E4E8"> { </span><span style="color:#FFAB70">data</span><span style="color:#E1E4E8">: </span><span style="color:#79B8FF">comments</span><span style="color:#E1E4E8"> } </span><span style="color:#F97583">of</span><span style="color:#E1E4E8"> issueCommentsIterator) {</span></span>
<span data-line=""><span style="color:#F97583">    for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">const</span><span style="color:#79B8FF"> comment</span><span style="color:#F97583"> of</span><span style="color:#E1E4E8"> comments) {</span></span>
<span data-line=""><span style="color:#6A737D">      // PRのコメントはスキップ</span></span>
<span data-line=""><span style="color:#6A737D">      // html_url: 'https://github.com/user/repo/pull/1#issuecomment-123456'</span></span>
<span data-line=""><span style="color:#6A737D">      // /でsplitして最後から2番目が"pull"の場合はPRのコメント</span></span>
<span data-line=""><span style="color:#F97583">      if</span><span style="color:#E1E4E8"> (comment.html_url.</span><span style="color:#B392F0">split</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"/"</span><span style="color:#E1E4E8">).</span><span style="color:#B392F0">slice</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">-</span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">)[</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">===</span><span style="color:#9ECBFF"> "pull"</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">continue</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E1E4E8">      console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"Comment #%d"</span><span style="color:#E1E4E8">, comment.id);</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">      const</span><span style="color:#E1E4E8"> { </span><span style="color:#79B8FF">body</span><span style="color:#E1E4E8">, </span><span style="color:#F97583">...</span><span style="color:#79B8FF">commentData</span><span style="color:#E1E4E8"> } </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> comment;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">      const</span><span style="color:#79B8FF"> issueNumber</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> Number</span><span style="color:#E1E4E8">(comment.issue_url.</span><span style="color:#B392F0">split</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"/"</span><span style="color:#E1E4E8">).</span><span style="color:#B392F0">pop</span><span style="color:#E1E4E8">());</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#B392F0">      mkdirSync</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">issueCommentsDirPath</span><span style="color:#E1E4E8">({ issueNumber }), { recursive: </span><span style="color:#79B8FF">true</span><span style="color:#E1E4E8"> });</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6A737D">      // yaml形式にする</span></span>
<span data-line=""><span style="color:#F97583">      const</span><span style="color:#79B8FF"> yamlContent</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> stringify</span><span style="color:#E1E4E8">(</span></span>
<span data-line=""><span style="color:#6A737D">        // biome-ignore lint/style/noNonNullAssertion: bodyは必ず存在する</span></span>
<span data-line=""><span style="color:#E1E4E8">        body</span><span style="color:#F97583">!</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#E1E4E8">        commentData,</span></span>
<span data-line=""><span style="color:#E1E4E8">      );</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6A737D">      // ファイルを書き込む</span></span>
<span data-line=""><span style="color:#B392F0">      writeFileSync</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">issueCommentFilePath</span><span style="color:#E1E4E8">({ issueNumber, commentId: comment.id }), yamlContent);</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#E1E4E8">  }</span></span>
<span data-line=""><span style="color:#E1E4E8">};</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#B392F0"> main</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#6A737D">  // 削除されたものが残らないように、前のデータを削除</span></span>
<span data-line=""><span style="color:#F97583">  if</span><span style="color:#E1E4E8"> (</span><span style="color:#B392F0">existsSync</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">ISSUES_DIR</span><span style="color:#E1E4E8">)) </span><span style="color:#B392F0">rmdirSync</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">ISSUES_DIR</span><span style="color:#E1E4E8">, { recursive: </span><span style="color:#79B8FF">true</span><span style="color:#E1E4E8"> });</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  await</span><span style="color:#B392F0"> saveIssues</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  await</span><span style="color:#B392F0"> saveIssueComments</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">};</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#B392F0">main</span><span style="color:#E1E4E8">();</span></span><button type="button" title="Copy code" aria-label="Copy code" data="/**
 * ローカルで実行する場合
 *
 * - 用意したアクセストークンをGITHUB_TOKENに設定
 * - リポジトリをGITHUB_REPOSITORYに設定 (例: &#x22;user/repo&#x22;)
 */

import { existsSync, mkdirSync, rmdirSync, writeFileSync } from &#x22;node:fs&#x22;;
import { stringify } from &#x22;gray-matter&#x22;;
import { Octokit } from &#x22;octokit&#x22;;

const DATA_DIR = &#x22;./data&#x22;;
const ISSUES_DIR = &#x60;${DATA_DIR}/issues&#x60;;
const ISSUE_FILE = &#x22;issue.md&#x22;;
const ISSUE_COMMENTS_DIR = &#x22;comments&#x22;;

const issueDirPath = ({ issueNumber }: { issueNumber: number }) => &#x60;${ISSUES_DIR}/${issueNumber}&#x60; as const;

const issueFilePath = ({ issueNumber }: { issueNumber: number }) =>
  &#x60;${issueDirPath({ issueNumber })}/${ISSUE_FILE}&#x60; as const;

const issueCommentsDirPath = ({ issueNumber }: { issueNumber: number }) =>
  &#x60;${ISSUES_DIR}/${issueNumber}/${ISSUE_COMMENTS_DIR}&#x60; as const;

const issueCommentFilePath = ({ issueNumber, commentId }: { issueNumber: number; commentId: number }) =>
  &#x60;${issueCommentsDirPath({ issueNumber })}/${commentId}.md&#x60; as const;

const octokit = new Octokit({
  auth: process.env.GITHUB_TOKEN,
});

const saveIssues = async () => {
  const issuesIterator = octokit.paginate.iterator(octokit.rest.issues.listForRepo, {
    owner: (process.env.GITHUB_REPOSITORY ?? &#x22;&#x22;).split(&#x22;/&#x22;)[0],
    repo: (process.env.GITHUB_REPOSITORY ?? &#x22;&#x22;).split(&#x22;/&#x22;)[1],
    // 全てのissueを取得
    state: &#x22;all&#x22;,
    per_page: 100,
  });

  for await (const { data: issues } of issuesIterator) {
    for (const issue of issues) {
      // PRはスキップ
      if (issue.pull_request) continue;

      console.log(&#x22;Issue #%d: %s&#x22;, issue.number, issue.title);

      const { body, ...issueData } = issue;

      mkdirSync(issueDirPath({ issueNumber: issue.number }), { recursive: true });

      // yaml形式にする
      const yamlContent = stringify(
        // biome-ignore lint/style/noNonNullAssertion: bodyは必ず存在する
        body!,
        issueData,
      );

      // ファイルを書き込む
      writeFileSync(issueFilePath({ issueNumber: issue.number }), yamlContent);
    }
  }
};

const saveIssueComments = async () => {
  const issueCommentsIterator = octokit.paginate.iterator(octokit.rest.issues.listCommentsForRepo, {
    owner: (process.env.GITHUB_REPOSITORY ?? &#x22;&#x22;).split(&#x22;/&#x22;)[0],
    repo: (process.env.GITHUB_REPOSITORY ?? &#x22;&#x22;).split(&#x22;/&#x22;)[1],
    per_page: 100,
  });

  for await (const { data: comments } of issueCommentsIterator) {
    for (const comment of comments) {
      // PRのコメントはスキップ
      // html_url: &#x27;https://github.com/user/repo/pull/1#issuecomment-123456&#x27;
      // /でsplitして最後から2番目が&#x22;pull&#x22;の場合はPRのコメント
      if (comment.html_url.split(&#x22;/&#x22;).slice(-2)[0] === &#x22;pull&#x22;) continue;

      console.log(&#x22;Comment #%d&#x22;, comment.id);

      const { body, ...commentData } = comment;

      const issueNumber = Number(comment.issue_url.split(&#x22;/&#x22;).pop());

      mkdirSync(issueCommentsDirPath({ issueNumber }), { recursive: true });

      // yaml形式にする
      const yamlContent = stringify(
        // biome-ignore lint/style/noNonNullAssertion: bodyは必ず存在する
        body!,
        commentData,
      );

      // ファイルを書き込む
      writeFileSync(issueCommentFilePath({ issueNumber, commentId: comment.id }), yamlContent);
    }
  }
};

const main = async () => {
  // 削除されたものが残らないように、前のデータを削除
  if (existsSync(ISSUES_DIR)) rmdirSync(ISSUES_DIR, { recursive: true });

  await saveIssues();

  await saveIssueComments();
};

main();" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>9:["$","article",null,{"className":"w-full divide-y divide-[#30363db3]","children":[["$","section",null,{"className":"markdown","children":[["$","header",null,{"children":[["$","time",null,{"itemProp":"datePublished","dateTime":"2024-10-14T17:47:39Z","className":"text-gray-400 text-sm ","children":"2024-10-15 02:47"}],["$","h1",null,{"className":"!mt-0","children":"Node.jsでGitHubリポジトリのIssueとコメントを全て取得して保存するスクリプト"}],false]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$11"}}]]}],[]]}]
